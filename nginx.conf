
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    log_format quic '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" "$http3"';

    access_log logs/access.log quic;

    server {
        # for better compatibility it's recommended
        # to use the same port for quic and https
        listen 443 quic reuseport;
        listen 443 ssl;

        ssl_certificate         /etc/letsencrypt/live/http3.cii.com.tw/fullchain.pem;
        ssl_certificate_key     /etc/letsencrypt/live/http3.cii.com.tw/privkey.pem;

        ssl_certificate_by_lua_block {
            local ssl = require "ngx.ssl"
            local redis = require "resty.redis"

            -- Helper function to get cert & key from redis
            local function fetch_from_redis(domain)
		        local red = redis:new()
                red:set_timeout(1000) -- 1 second timeout
                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.log(ngx.ERR, "failed to connect to Redis: ", err)
                    return nil, nil
                end
                
                -- Fetch cert and key from Redis based on domain
                local cert_pem, err = red:get("ssl_cert:" .. domain .. ":cert")
                if not cert_pem or cert_pem == ngx.null then
                    ngx.log(ngx.ERR, "failed to get certificate from Redis for ", domain)
                    return nil, nil
                end

                local key_pem, err = red:get("ssl_cert:" .. domain .. ":key")
                if not key_pem or key_pem == ngx.null then
                    ngx.log(ngx.ERR, "failed to get key from Redis for ", domain)
                    return nil, nil
                end
	            return cert_pem, key_pem 
		# This is the valid return statement
            end

            -- Get the current domain name (SNI hostname)
            local domain, err = ssl.server_name()
            if not domain then
                ngx.log(ngx.ERR, "failed to get SNI server name: ", err)
                return
            end

	        local cert_pem_redis, key_pem_redis = fetch_from_redis(domain)

            -- Set the certificate
            local ok, err = ssl.set_der_cert(cert_pem_redis)
            if not ok then
                ngx.log(ngx.ERR, "failed to set SSL certificate: ", err)
                return
            end

            -- Set the private key
            local ok, err = ssl.set_der_priv_key(key_pem_redis)
            if not ok then
                ngx.log(ngx.ERR, "failed to set SSL private key: ", err)
                return
            end
        }
        location / {
            # required for browsers to direct them to quic port
            add_header Alt-Svc 'h3=":443"; ma=86400';
        }
    }

    #gzip  on;

    # server {
    #     listen       80;
    #     server_name  localhost;

    #     #charset koi8-r;

    #     #access_log  logs/host.access.log  main;

    #     location / {
    #         root   html;
    #         index  index.html index.htm;
    #     }

    #     #error_page  404              /404.html;

    #     # redirect server error pages to the static page /50x.html
    #     #
    #     error_page   500 502 503 504  /50x.html;
    #     location = /50x.html {
    #         root   html;
    #     }

    #     # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #     #
    #     #location ~ \.php$ {
    #     #    proxy_pass   http://127.0.0.1;
    #     #}

    #     # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #     #
    #     #location ~ \.php$ {
    #     #    root           html;
    #     #    fastcgi_pass   127.0.0.1:9000;
    #     #    fastcgi_index  index.php;
    #     #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #     #    include        fastcgi_params;
    #     #}

    #     # deny access to .htaccess files, if Apache's document root
    #     # concurs with nginx's one
    #     #
    #     #location ~ /\.ht {
    #     #    deny  all;
    #     #}
    # }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
